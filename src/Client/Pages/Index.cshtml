@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row">
    <div class="col col-sm-8">
        <div class="row">

            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <button class="nav-link active" id="nav-wellKnown-tab" data-bs-toggle="tab" data-bs-target="#nav-wellKnown" type="button" role="tab" aria-controls="nav-wellKnown" aria-selected="true">Well Known</button>
                    <button class="nav-link" v-if="!jwksDisabled" id="nav-jwks-tab" data-bs-toggle="tab" data-bs-target="#nav-jwks" type="button" role="tab" aria-controls="nav-jwks" aria-selected="false">JWKS</button>
                    <button class="nav-link" v-if="!authDisabled" id="nav-authenticate-tab" data-bs-toggle="tab" data-bs-target="#nav-authenticate" type="button" role="tab" aria-controls="nav-authenticate" aria-selected="false">Authenticate</button>
                    <button class="nav-link" v-if="!introspectDisabled" id="nav-introspection-tab" data-bs-toggle="tab" data-bs-target="#nav-introspection" type="button" role="tab" aria-controls="nav-introspection" aria-selected="false">Introspection</button>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-wellKnown" role="tabpanel" aria-labelledby="nav-wellKnown-tab">
                    <form id="WellKnown">
                        <div class="form-group">
                            <label for="loginUsername">URI</label>
                            <input type="text" class="form-control" id="wellKnownUri" aria-describedby="jwksUriHelp" placeholder="Enter Uri" v-model="wellKnownScreen.wellKnownUri">
                            <small id="jwksUriHelp" class="form-text text-muted">Please enter the Well Known Uri of the Identity Provider.</small>
                        </div>
                        <button type="button" class="btn btn-primary" v-on:click="getWellKnown">Get Well Known Data</button>
                        <div class="form-group">
                            <label for="loginUsername">Issuer</label>
                            <input type="text" class="form-control" readonly="readonly" id="issuer" v-model="wellKnownData.issuer">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">JWKS</label>
                            <input type="text" class="form-control" readonly="readonly" id="jwks" v-model="wellKnownData.jwks_uri">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Registration</label>
                            <input type="text" class="form-control" readonly="readonly" id="registration_endpoint" v-model="wellKnownData.registration_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Pushed Authorization Requests</label>
                            <input type="text" class="form-control" readonly="readonly" id="pushed_authorization_request_endpoint" v-model="wellKnownData.pushed_authorization_request_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Authorization</label>
                            <input type="text" class="form-control" readonly="readonly" id="authorization_endpoint" v-model="wellKnownData.authorization_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Token</label>
                            <input type="text" class="form-control" readonly="readonly" id="token_endpoint" v-model="wellKnownData.token_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Token Introspection</label>
                            <input type="text" class="form-control" readonly="readonly" id="introspection_endpoint" v-model="wellKnownData.introspection_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Token Revocation</label>
                            <input type="text" class="form-control" readonly="readonly" id="revocation_endpoint" v-model="wellKnownData.revocation_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">User Information</label>
                            <input type="text" class="form-control" readonly="readonly" id="userinfo_endpoint" v-model="wellKnownData.userinfo_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">End Session</label>
                            <input type="text" class="form-control" readonly="readonly" id="end_session_endpoint" v-model="wellKnownData.end_session_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported Grant Types</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.grant_types_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported Response Types</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.response_types_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported Modes</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.response_modes_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                    </form>

                </div>
                <div v-if="!jwksDisabled" class="tab-pane fade" id="nav-jwks" role="tabpanel" aria-labelledby="nav-jwks-tab">
                    <form id="JWKS">
                        <div v-for="item in jwksData.keys" class="card">
                            <div class="card-body">
                                <h5 class="card-title">{{item.kid}}</h5>
                                <div class="form-group">
                                    <label for="alg">Algorithm</label>
                                    <input type="text" class="form-control" readonly="readonly" id="alg" v-model="item.alg">
                                </div>
                                <div class="form-group">
                                    <label for="use">Use</label>
                                    <input type="text" class="form-control" readonly="readonly" id="use" v-model="item.use">
                                </div>
                                <div class="form-group">
                                    <label for="x5c">Certificate Chain</label>
                                    <textarea class="form-control" rows="5">{{item.x5c}}</textarea>
                                </div>
                                <div class="form-group">
                                    <label for="n">Modulus</label>
                                    <input type="text" class="form-control" readonly="readonly" id="n" v-model="item.n">
                                </div>
                                <div class="form-group">
                                    <label for="e">Exponent</label>
                                    <input type="text" class="form-control" readonly="readonly" id="e" v-model="item.e">
                                </div>
                                <div class="form-group">
                                    <label for="kty">Type</label>
                                    <input type="text" class="form-control" readonly="readonly" id="kty" v-model="item.kty">
                                </div>
                                <div class="form-group">
                                    <label for="x5t">Thumbprint</label>
                                    <input type="text" class="form-control" readonly="readonly" id="x5t" v-model="item.x5t">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div v-if="!authDisabled" class="tab-pane fade" id="nav-authenticate" role="tabpanel" aria-labelledby="nav-authenticate-tab">
                    <form id="LoginForm">
                        <div class="form-group">
                            <label for="loginAudience">Audience</label>
                            <select class="form-control" id="loginAudience" v-model="loginScreen.audience">
                                <option>System A</option>
                                <option>System B</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginType">Type</label>
                            <select class="form-control" id="loginType" v-model="loginScreen.type">
                                <option value="authorization_code">Authorization Code</option>
                                <option value="client_credentials">Client Credentials</option>
                                <option value="password">Password</option>
                                <option value="refresh_token">Refresh Token</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Username</label>
                            <input type="text" class="form-control" id="loginUsername" aria-describedby="usernameHelp" placeholder="Enter Username" v-model="loginScreen.username">
                            <small id="usernameHelp" class="form-text text-muted">Please enter your username.</small>
                        </div>
                        <div class="form-group">
                            <label for="loginPassword">Password</label>
                            <input type="password" class="form-control" id="loginPassword" placeholder="Password" v-model="loginScreen.password">
                        </div>
                        <button type="button" class="btn btn-primary" v-on:click="getAuthorized" :disabled="authDisabled">Authenticate</button>
                    </form>
                </div>
                <div v-if="!authDisabled" class="tab-pane fade" id="nav-introspection" role="tabpanel" aria-labelledby="nav-introspection-tab">
                    <form id="IntrospectionForm">
                        <div class="form-group">
                            <label for="token_type_hint">Type</label>
                            <select class="form-control" id="token_type_hint" v-model="introspectionScreen.token_type_hint">
                                <option>jwt</option>
                                <option>refresh</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="introspectionToken">Token</label>
                            <input type="text" class="form-control" id="introspectionToken" aria-describedby="tokenHelp" placeholder="Enter Token" v-model="introspectionScreen.token">
                            <small id="tokenHelp" class="form-text text-muted">Please enter your token.</small>
                        </div>
                        <button type="button" class="btn" v-on:click="copyIntrospectionJWT" :disabled="introspectDisabled">Take Access Token</button>
                        <button type="button" class="btn" v-on:click="copyIntrospectionRefresh" :disabled="introspectDisabled">Take Refresh Token</button>
                        <button type="button" class="btn btn-primary" v-on:click="getIntrospection" :disabled="introspectDisabled">Run Introspection</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="col col-sm-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">JWT Token</h5>
                <pre><code>{{ token }}</code></pre>
                <p>Expires: <b>{{ tokenExpires }}</b></p>
            </div>
            <div class="card-body">
                <h5 class="card-title">Decoded</h5>
                <pre><code>{{ decodedToken }}</code></pre>
            </div>
            <div class="card-body">
                <h5 class="card-title">Refresh Token</h5>
                <pre><code>{{ refreshToken }}</code></pre>
                <p>Expires: <b>{{ refreshTokenExpires }}</b></p>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script type="module">

        import { createApp } from './lib/vue/vue.esm-browser.min.js';

        function parseJwt(token) {
            if (token != undefined && token != "") {
                var base64Url = token.split('.')[1];
                var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));

                var result = JSON.parse(jsonPayload);

                return result;
            }

            return "";
        };

        function serialize(obj) {
            var str = [];
            for (var p in obj)
                if (obj.hasOwnProperty(p)) {
                    str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                }
            return str.join("&");
        }

        // Make an API call with the given parameters
        function apiCall(url, method, request, callback) {

            debugger;
            var data;
            if (method == "GET") {
                data = serialize(request)
            }
            else {
                data = JSON.stringify(request);
            }

            // Make the ajax call
            $.ajax({
                type: method,
                url: url,
                data: data,
                crossDomain: true,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function(data, status, jqXHR) {

                    // Was the call successful?
                    var success = (status == "success");
                    if (!success) {
                        alert("Error: " + jqXHR.responseText);
                    }
                    try {
                        var convertedData = JSON.parse(data);
                        data = convertedData;
                    }
                    catch {
                        // Not Json data so return origional
                    }

                    // Success?
                    callback(success, data);
                },
                error: function(jgXHR, status) {

                    //alert("Error: " + jgXHR.responseText);

                    // Do the failure calls
                    callback(false, { data: jgXHR.responseText, messsages: ["Error Connecting To Api"] });
                }
            });
        }

        function unixTicksToIsoString(seconds) {
            var expiryDateTime = new Date(seconds * 1000);
            return expiryDateTime.toISOString();
        }

        const app = createApp({
            data() {
                return {
                    token: "",
                    refreshToken: "",
                    tokenExpires: "",
                    loginScreen: {
                        audience: "System B",
                        type: "password",
                        username: "",
                        password: ""
                    },
                    wellKnownScreen: {
                        wellKnownUri: "https://localhost:7198/.well-known/openid-configuration"
                    },
                    introspectionScreen: {
                        token: "",
                        token_type_hint: ""
                    },
                    wellKnownData: {
                        issuer: "",
                        jwks_uri: "",
                        registration_endpoint: "",
                        pushed_authorization_request_endpoint: "",
                        authorization_endpoint: "",
                        token_endpoint: "",
                        introspection_endpoint: "",
                        revocation_endpoint: "",
                        userinfo_endpoint: "",
                        end_session_endpoint: "",
                        grant_types_supported: [],
                        response_types_supported: [],
                        response_modes_supported: []
                    },
                    jwksData: {}
                }
            },
            computed: {
                jwksDisabled: function() {
                    return (this.wellKnownData.jwks_uri == undefined || this.wellKnownData.jwks_uri == "");
                },
                authDisabled: function() {
                    return (this.wellKnownData.authorization_endpoint == undefined || this.wellKnownData.authorization_endpoint == "");
                },
                introspectDisabled: function() {
                    return (this.token == "" && this.refreshToken == "");
                },
                decodedToken: function() {
                    if (this.token != undefined && this.token != "") {
                        var result = parseJwt(this.token);
                        this.tokenExpires = unixTicksToIsoString(result['exp']);
                        return result;
                    }
                    else {
                        this.expiryDate = "";
                        return "";
                    }
                },
                refreshTokenExpires: function() {
                    if (this.refreshToken != undefined && this.refreshToken != "") {
                        var result = parseJwt(this.refreshToken);
                        return unixTicksToIsoString(result['exp']);
                    }
                    else {
                        this.expiryDate = "";
                        return "";
                    }
                }
            },
            methods: {
                getWellKnown() {
                    apiCall(this.wellKnownScreen.wellKnownUri, "GET", {}, this.callbackWellKnown);
                },
                callbackWellKnown(success, response) {
                    this.wellKnownData = response; // Copy over existing object (same properties anyway)

                    // Now load the JWKS if possible
                    if (!this.jwksDisabled)
                        this.getJWKS();
                },
                getJWKS() {
                    apiCall(this.wellKnownData.jwks_uri, "GET", {}, this.callbackJWKS);
                },
                callbackJWKS(success, response) {
                    this.jwksData = response; // Copy over existing object (same properties anyway)
                },
                getAuthorized() {
                    var request;
                    if (this.loginScreen.type == "password") {
                        request = { audience: this.loginScreen.audience, type: "password", username: this.loginScreen.username, password: this.loginScreen.password };
                    }
                    apiCall(this.wellKnownData.authorization_endpoint, "GET", request, this.callbackAuthorized);
                },
                callbackAuthorized(success, response) {
                    if (success) {
                        this.token = response.accessToken;
                        this.refreshToken = response.refreshToken;
                    }
                    else {
                        var failureData = JSON.parse(response.data);

                        debugger;

                        // Failure .. Kill the context
                        this.token = "";
                        this.tokenExpires = "";
                        this.refreshToken = "";
                        this.refreshTokenExpires = "";
                    }
                },
                copyIntrospectionJWT() {
                    this.introspectionScreen.token_type_hint = "jwt";
                    this.introspectionScreen.token = this.token;
                    debugger;
                },
                copyIntrospectionRefesh() {
                    this.introspectionScreen.token_type_hint = "refresh";
                    this.introspectionScreen.token = this.refreshToken;
                    debugger;
                },
                getIntrospection() {
                    // Post but with query params (I know right!)
                    apiCall(this.wellKnownData.introspection_endpoint + "?" + serialize({ token: this.introspectionScreen.token, token_type_hint: this.introspectionScreen.token_type_hint }), "POST", {}, this.callbackIntrospection);
                },
                callbackIntrospection(success, response) {
                    debugger;
                }
            },
        }).mount('#app');
    </script>


}