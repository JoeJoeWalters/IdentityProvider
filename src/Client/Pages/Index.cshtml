@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row">
    <div class="col col-sm-8">
        <div class="row">

            <nav>
                <div class="nav nav-tabs" id="nav-tab" role="tablist">
                    <button class="nav-link active" id="nav-wellKnown-tab" data-bs-toggle="tab" data-bs-target="#nav-wellKnown" type="button" role="tab" aria-controls="nav-wellKnown" aria-selected="true">Well Known</button>
                    <button class="nav-link" v-if="!jwksDisabled" id="nav-jwks-tab" data-bs-toggle="tab" data-bs-target="#nav-jwks" type="button" role="tab" aria-controls="nav-jwks" aria-selected="false">JWKS</button>
                    <button class="nav-link" v-if="!pkceDisabled" id="nav-pkce-tab" data-bs-toggle="tab" data-bs-target="#nav-pkce" type="button" role="tab" aria-controls="nav-pkce" aria-selected="false">PKCE</button>
                    <button class="nav-link" v-if="!authenticationDisabled" id="nav-authentication-tab" data-bs-toggle="tab" data-bs-target="#nav-authentication" type="button" role="tab" aria-controls="nav-authentication" aria-selected="false">Authentication</button>
                    <button class="nav-link" v-if="!tokenDisabled" id="nav-token-tab" data-bs-toggle="tab" data-bs-target="#nav-token" type="button" role="tab" aria-controls="nav-token" aria-selected="false">Token</button>
                    <button class="nav-link" v-if="!introspectDisabled" id="nav-introspection-tab" data-bs-toggle="tab" data-bs-target="#nav-introspection" type="button" role="tab" aria-controls="nav-introspection" aria-selected="false">Introspection</button>
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane fade show active" id="nav-wellKnown" role="tabpanel" aria-labelledby="nav-wellKnown-tab">

                    <!-- Start Documentation -->
                    <a data-bs-toggle="collapse" data-bs-target="#collapseInfoProviderMetadata" aria-expanded="false" aria-controls="collapseInfoProviderMetadata"><i class="fa-solid fa-circle-question"></i></a>
                    <div class="collapse" id="collapseInfoProviderMetadata">
                        <div class="card card-body">
                            <iframe src="/documents/rfc/rfc8414.txt" style="width:100%; height: 400px"></iframe>
                        </div>
                    </div>
                    <!-- End Documentation -->

                    <form id="WellKnown">
                        <div class="form-group">
                            <label for="loginUsername">URI</label>
                            <input type="text" class="form-control" id="wellKnownUri" aria-describedby="jwksUriHelp" placeholder="Enter Uri" v-model="wellKnownScreen.wellKnownUri">
                            <small id="jwksUriHelp" class="form-text text-muted">Please enter the Well Known Uri of the Identity Provider.</small>
                        </div>
                        <button type="button" class="btn btn-primary" v-on:click="getWellKnown">Get Well Known Data</button>
                        <div class="form-group">
                            <label for="loginUsername">Issuer</label>
                            <input type="text" class="form-control" readonly="readonly" id="issuer" v-model="wellKnownData.issuer">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">JWKS</label>
                            <input type="text" class="form-control" readonly="readonly" id="jwks" v-model="wellKnownData.jwks_uri">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Registration</label>
                            <input type="text" class="form-control" readonly="readonly" id="registration_endpoint" v-model="wellKnownData.registration_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Pushed Authorization Requests</label>
                            <input type="text" class="form-control" readonly="readonly" id="pushed_authorization_request_endpoint" v-model="wellKnownData.pushed_authorization_request_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Authorization</label>
                            <input type="text" class="form-control" readonly="readonly" id="authorization_endpoint" v-model="wellKnownData.authorization_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Token</label>
                            <input type="text" class="form-control" readonly="readonly" id="token_endpoint" v-model="wellKnownData.token_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Token Introspection</label>
                            <input type="text" class="form-control" readonly="readonly" id="introspection_endpoint" v-model="wellKnownData.introspection_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Token Revocation</label>
                            <input type="text" class="form-control" readonly="readonly" id="revocation_endpoint" v-model="wellKnownData.revocation_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">User Information</label>
                            <input type="text" class="form-control" readonly="readonly" id="userinfo_endpoint" v-model="wellKnownData.userinfo_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">End Session</label>
                            <input type="text" class="form-control" readonly="readonly" id="end_session_endpoint" v-model="wellKnownData.end_session_endpoint">
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported Grant Types</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.grant_types_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported Response Types</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.response_types_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported Modes</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.response_modes_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="loginUsername">Supported ACR Values</label>
                            <select class="form-control" readonly="readonly" multiple="multiple">
                                <option v-for="item in wellKnownData.acr_values_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                    </form>

                </div>
                <div v-if="!jwksDisabled" class="tab-pane fade" id="nav-jwks" role="tabpanel" aria-labelledby="nav-jwks-tab">

                    <!-- Start Documentation -->
                    <a data-bs-toggle="collapse" data-bs-target="#collapseInfoJWKS" aria-expanded="false" aria-controls="collapseInfoJWKS"><i class="fa-solid fa-circle-question"></i></a>
                    <div class="collapse" id="collapseInfoJWKS">
                        <div class="card card-body">
                            <iframe src="/documents/rfc/rfc7517.txt" style="width:100%; height: 400px"></iframe>
                        </div>
                    </div>
                    <!-- End Documentation -->

                    <form id="JWKS">
                        <div v-for="item in jwksData.keys" class="card">
                            <div class="card-body">
                                <h5 class="card-title">{{item.kid}}</h5>
                                <div class="form-group">
                                    <label for="alg">Algorithm</label>
                                    <input type="text" class="form-control" readonly="readonly" id="alg" v-model="item.alg">
                                </div>
                                <div class="form-group">
                                    <label for="use">Use</label>
                                    <input type="text" class="form-control" readonly="readonly" id="use" v-model="item.use">
                                </div>
                                <div class="form-group">
                                    <label for="x5c">Certificate Chain</label>
                                    <textarea class="form-control" rows="5">{{item.x5c}}</textarea>
                                </div>
                                <div class="form-group">
                                    <label for="n">Modulus</label>
                                    <input type="text" class="form-control" readonly="readonly" id="n" v-model="item.n">
                                </div>
                                <div class="form-group">
                                    <label for="e">Exponent</label>
                                    <input type="text" class="form-control" readonly="readonly" id="e" v-model="item.e">
                                </div>
                                <div class="form-group">
                                    <label for="kty">Type</label>
                                    <input type="text" class="form-control" readonly="readonly" id="kty" v-model="item.kty">
                                </div>
                                <div class="form-group">
                                    <label for="x5t">Thumbprint</label>
                                    <input type="text" class="form-control" readonly="readonly" id="x5t" v-model="item.x5t">
                                </div>
                            </div>
                        </div>
                    </form>
                </div>


                <div v-if="!pkceDisabled" class="tab-pane fade" id="nav-pkce" role="tabpanel" aria-labelledby="nav-pkce-tab">

                    <!-- Start Documentation -->
                    <a data-bs-toggle="collapse" data-bs-target="#collapseInfoPKCE" aria-expanded="false" aria-controls="collapseInfoPKCE"><i class="fa-solid fa-circle-question"></i></a>
                    <div class="collapse" id="collapseInfoJWKS">
                        <div class="card card-body">
                            <iframe src="/documents/rfc/rfc7636.txt" style="width:100%; height: 400px"></iframe>
                        </div>
                    </div>
                    <!-- End Documentation -->

                    <form id="PKCE">
                        <div class="form-group">
                            <label for="code_verifier">Code Verifier</label>
                            <input type="text" readonly="readonly" class="form-control" id="code_verifier" v-model="pkceScreen.code_verifier">
                        </div>
                        <div class="form-group">
                            <label for="code_challenge">Code Challenge</label>
                            <input type="text" readonly="readonly" class="form-control" id="code_challenge" v-model="pkceScreen.code_challenge">
                        </div>
                        <div class="form-group">
                            <label for="code_challenge_method">Code Challenge Method</label>
                            <select class="form-control" readonly="readonly" id="code_challenge_method" v-model="pkceScreen.code_challenge_method">
                                <option value=""></option>
                                <option value="SHA256">SHA256</option>
                            </select>
                        </div>
                        <button type="button" class="btn btn-primary" v-on:click="createPKSEVerifier">Create New Verifier</button>
                    </form>
                </div>

                <div v-if="!authenticationDisabled" class="tab-pane fade" id="nav-authentication" role="tabpanel" aria-labelledby="nav-authentication-tab">

                    <!-- Start Documentation -->
                    <a data-bs-toggle="collapse" data-bs-target="#collapseInfoAuth" aria-expanded="false" aria-controls="collapseInfoAuth"><i class="fa-solid fa-circle-question"></i></a>
                    <div class="collapse" id="collapseInfoAuth">
                        <div class="card card-body">
                            <iframe src="/documents/rfc/rfc6749.txt" style="width:100%; height: 400px"></iframe>
                        </div>
                    </div>
                    <!-- End Documentation -->

                    <form id="AuthenticationForm">
                        <div class="form-group">
                            <label for="response_type">Response Type</label>
                            <select class="form-control" id="response_type" v-model="authenticationScreen.response_type">
                                <option v-for="item in wellKnownData.response_types_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="response_mode">Response Mode</label>
                            <select class="form-control" id="response_type" v-model="authenticationScreen.response_mode">
                                <option v-for="item in wellKnownData.response_modes_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="client_id">Client ID</label>
                            <input type="text" readonly="readonly" class="form-control" id="client_id" v-model="client_id">
                        </div>
                        <div class="form-group">
                            <label for="redirect_uri">Redirect Uri</label>
                            <input type="text" readonly="readonly" class="form-control" id="redirect_uri" v-model="authenticationScreen.redirect_uri">
                        </div>
                        <div class="form-group">
                            <label for="scope">Scope</label>
                            <input type="text" class="form-control" id="scope" v-model="authenticationScreen.scope">
                        </div>
                        <div class="form-group">
                            <label for="state">State</label>
                            <input type="text" class="form-control" id="state" v-model="authenticationScreen.state">
                        </div>

                        <button type="button" class="btn btn-primary" data-toggle="modal" v-on:click="launchAuthenticate">
                            <!-- data-target="#authenticationModel" data-bs-toggle="modal" data-bs-target="#authenticationModel"> -->
                            Launch Authentication (From Server)
                        </button>

                        <!-- Auhentication Modal -->
                        <div class="modal fade" id="authenticationModel" tabindex="-1" role="dialog" aria-labelledby="authenticationModel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-scrollable" role="document">
                                <div class="modal-content">
                                    <div class="modal-body">
                                        <iframe id="authenticationIframe" sandbox="allow-same-origin allow-scripts allow-popups allow-forms allow-modals" scrolling="no" style="width:100%; height: 400px; overflow:auto"></iframe>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div v-if="!authenticationDisabled" class="tab-pane fade" id="nav-token" role="tabpanel" aria-labelledby="nav-token-tab">

                    <!-- Start Documentation -->
                    <a data-bs-toggle="collapse" data-bs-target="#collapseInfoToken" aria-expanded="false" aria-controls="collapseInfoToken"><i class="fa-solid fa-circle-question"></i></a>
                    <div class="collapse" id="collapseInfoToken">
                        <div class="card card-body">
                            <iframe src="/documents/rfc/rfc6750.txt" style="width:100%; height: 400px"></iframe>
                        </div>
                    </div>
                    <!-- End Documentation -->

                    <form id="TokenForm">
                        <div class="form-group">
                            <label for="loginType">Type</label>
                            <select class="form-control" id="loginType" v-model="tokenScreen.type">
                                <option v-for="item in wellKnownData.grant_types_supported" :value="item">{{item}}</option>
                            </select>
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'password'">
                            <label for="loginUsername">Username</label>
                            <input type="text" class="form-control" id="loginUsername" aria-describedby="usernameHelp" placeholder="Enter Username" v-model="tokenScreen.username">
                            <small id="usernameHelp" class="form-text text-muted">Please enter your username.</small>
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'password'">
                            <label for="loginPassword">Password</label>
                            <input type="password" class="form-control" id="loginPassword" placeholder="Password" v-model="tokenScreen.password">
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'authorization_code'">
                            <label for="loginAuthCode">Code</label>
                            <input type="text" class="form-control" id="loginAuthCode" readonly="readonly" v-model="authorization_code">
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'authorization_code' && authenticationScreen.code_verifier != ''">
                            <label for="loginVerifier">PKCE Verifier</label>
                            <input type="text" class="form-control" id="loginVerifier" readonly="readonly" v-model="pkceScreen.code_verifier">
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'refresh_token'">
                            <label for="loginRefreshToken">Refresh Token</label>
                            <input type="text" class="form-control" id="loginRefreshToken" readonly="readonly" v-model="refreshToken">
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'client_credentials'">
                            <label for="loginPassword">Client ID</label>
                            <input type="text" class="form-control" id="loginClientId" readonly="readonly" v-model="client_id">
                        </div>
                        <div class="form-group" v-if="tokenScreen.type == 'client_credentials'">
                            <label for="loginPassword">Client Secret</label>
                            <input type="text" class="form-control" id="loginClientSecret" readonly="readonly" v-model="client_secret">
                        </div>
                        <button type="button" class="btn btn-primary" v-on:click="getToken" :disabled="tokenDisabled">Retrieve Token</button>
                    </form>
                </div>
                <div v-if="!introspectDisabled" class="tab-pane fade" id="nav-introspection" role="tabpanel" aria-labelledby="nav-introspection-tab">

                    <!-- Start Documentation -->
                    <a data-bs-toggle="collapse" data-bs-target="#collapseInfoIntrospection" aria-expanded="false" aria-controls="collapseInfoIntrospection"><i class="fa-solid fa-circle-question"></i></a>
                    <div class="collapse" id="collapseInfoIntrospection">
                        <div class="card card-body">
                            <iframe src="/documents/rfc/rfc7662.txt" style="width:100%; height: 400px"></iframe>
                        </div>
                    </div>
                    <!-- End Documentation -->

                    <form id="IntrospectionForm">
                        <div class="form-group">
                            <label for="token_type_hint">Type</label>
                            <select class="form-control" id="token_type_hint" v-model="introspectionScreen.token_type_hint">
                                <option>jwt</option>
                                <option>refresh</option>
                            </select>
                        </div>
                        <div class="form-group" v-if="introspectionScreen.token_type_hint == 'jwt'">
                            <label for="introspectionToken">JWT Token</label>
                            <input type="text" class="form-control" id="introspectionJWTToken" v-model="tokens[0].accessToken" readonly="readonly">
                        </div>
                        <div class="form-group" v-if="introspectionScreen.token_type_hint == 'refresh'">
                            <label for="introspectionToken">Refresh Token</label>
                            <input type="text" class="form-control" id="introspectionRefreshToken" v-model="tokens[0].refreshToken" readonly="readonly">
                        </div>
                        <div class="btn-toolbar">
                            <button type="button" class="btn btn-primary" v-on:click="getIntrospection" :disabled="introspectDisabled">Run Introspection</button>
                        </div>
                        <div class="form-group" v-if="introspectionData.loaded">
                            <label for="introspectionDataClientActive">Active?</label>
                            <input type="text" class="form-control" id="introspectionDataClientActive" v-model="introspectionData.active" readonly="readonly">
                        </div>
                        <div class="form-group" v-if="introspectionData.loaded">
                            <label for="introspectionDataClientScope">Scope</label>
                            <input type="text" class="form-control" id="introspectionDataClientScope" v-model="introspectionData.scope" readonly="readonly">
                        </div>
                        <div class="form-group" v-if="introspectionData.loaded">
                            <label for="introspectionDataClientId">Client Id</label>
                            <input type="text" class="form-control" id="introspectionDataClientId" v-model="introspectionData.client_id" readonly="readonly">
                        </div>
                        <div class="form-group" v-if="introspectionData.loaded">
                            <label for="introspectionDataUsername">Username</label>
                            <input type="text" class="form-control" id="introspectionDataUsername" v-model="introspectionData.username" readonly="readonly">
                        </div>
                        <div class="form-group" v-if="introspectionData.loaded">
                            <label for="introspectionDataExp">Expires</label>
                            <input type="text" class="form-control" id="introspectionDataExp" v-model="introspectionData.expAsString" readonly="readonly">
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="col col-sm-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Client Id</h5>
                <pre><code>{{ client_id }}</code></pre>
            </div>
            <div class="card-body">
                <h5 class="card-title">Client Secret</h5>
                <pre><code>{{ client_secret }}</code></pre>
            </div>
        </div>
        <div class="card mt-1" v-if="authCodeVisible">
            <div class="card-body">
                <h5 class="card-title">Authorization Code</h5>
                <pre><code>{{ authorization_code }}</code></pre>
            </div>
        </div>
        <div class="card mt-1" v-for="token in tokens">
            <div class="card-body">
                <h5 class="card-title">JWT Token <a href="/documents/rfc/rfc7519.txt" target="_blank"><i class="fa-solid fa-circle-question"></i></a></h5>
                <pre><code>{{ token.accessToken }}</code></pre>
                <p>Expires: <b>{{ token.accessTokenExpires }}</b></p>
            </div>
            <div class="card-body">
                <h5 class="card-title">Decoded</h5>
                <pre><code>{{ token.accessTokenDecoded }}</code></pre>
            </div>
            <div class="card-body">
                <h5 class="card-title">Refresh Token</h5>
                <pre><code>{{ token.refreshToken }}</code></pre>
                <p>Expires: <b>{{ token.refreshTokenExpires }}</b></p>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script type="module">

        import { createApp } from './lib/vue/vue.esm-browser.min.js';

        // https://www.npmjs.com/package/crypto-js
        //import { sha256 } from './crypto-js/sha256.js';
        //import { hmacSHA512 } from './crypto-js/hmac-sha512';
        //import ;

        //var crypto = requires("crypto-js");


        class tokenStorage
        {
            constructor(accessToken, refreshToken) {

                var accessTokenDecoded = parseJwt(accessToken);
                var refreshTokenDecoded = parseJwt(refreshToken);

                this.accessToken = accessToken;
                this.refreshToken = refreshToken;
                this.accessTokenExpires = unixTicksToIsoString(accessTokenDecoded['exp']),
                this.accessTokenDecoded = accessTokenDecoded,
                this.refreshTokenExpires = unixTicksToIsoString(refreshTokenDecoded['exp']),
                this.refreshTokenDecoded = refreshTokenDecoded
            }
        }

        function parseJwt(token) {
            if (token != undefined && token != "") {
                var base64Url = token.split('.')[1];
                var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));

                var result = JSON.parse(jsonPayload);

                return result;
            }

            return "";
        };

        function serialize(obj) {
            var str = [];
            for (var p in obj)
                if (obj.hasOwnProperty(p)) {
                    str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                }
            return str.join("&");
        }

        function unixTicksToIsoString(seconds) {
            var expiryDateTime = new Date(seconds * 1000);
            return expiryDateTime.toISOString();
        }

        function uuidv4() {
            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
                (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
            );
        }

        // Make an API call with the given parameters
        function apiCall(url, method, request, callback) {

            //debugger;
            var data;
            if (method == "GET") {
                data = serialize(request)
            }
            else {
                data = JSON.stringify(request);
            }

            // Make the ajax call
            $.ajax({
                type: method,
                url: url,
                data: data,
                crossDomain: true,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function(data, status, jqXHR) {

                    // Was the call successful?
                    var success = (status == "success");
                    if (!success) {
                        alert("Error: " + jqXHR.responseText);
                    }
                    try {
                        var convertedData = JSON.parse(data);
                        data = convertedData;
                    }
                    catch {
                        // Not Json data so return origional
                    }

                    // Success?
                    callback(success, data);
                },
                error: function(jgXHR, status) {

                    // Do the failure calls
                    callback(false, { data: jgXHR.responseText, messsages: ["Error Connecting To Api"] });
                }
            });
        }

        const app = createApp({
            data() {
                return {
                    client_id: "7ac39504-53f1-47f5-96b9-3c2682962b8b",
                    client_secret: "a2ffaf61-fde6-4b5d-b69d-5697321ea668",
                    authorization_code: "",
                    tokens: [],
                    token: "",
                    refreshToken: "",
                    tokenExpires: "",
                    tokenScreen: {
                        type: "password",
                        username: "",
                        password: ""
                    },
                    wellKnownScreen: {
                        wellKnownUri: "https://localhost:7198/.well-known/openid-configuration"
                    },
                    authenticationScreen: {
                        response_type: "code",
                        response_mode: "query",
                        redirect_uri: "https://localhost:7053/authorizeCallback",
                        scope: "",
                        state: "1234567890"
                    },
                    pkceScreen: {
                        code_verifier: "",
                        code_challenge: "",
                        code_challenge_method: ""
                    },
                    introspectionScreen: {
                        token_type_hint: "jwt"
                    },
                    introspectionData: {
                        loaded: false,
                        active: false,
                        scope: "",
                        client_id: "",
                        username: "",
                        exp: 0,
                        expAsString: ""
                    },
                    wellKnownData: {
                        issuer: "",
                        jwks_uri: "",
                        registration_endpoint: "",
                        pushed_authorization_request_endpoint: "",
                        authorization_endpoint: "",
                        token_endpoint: "",
                        introspection_endpoint: "",
                        revocation_endpoint: "",
                        userinfo_endpoint: "",
                        end_session_endpoint: "",
                        grant_types_supported: [],
                        response_types_supported: [],
                        response_modes_supported: [],
                        acr_values_supported: []
                    },
                    jwksData: {}
                }
            },
            computed: {
                tokenVisible: function() {
                    return (this.tokens.length > 0);
                },
                authCodeVisible: function() {
                    return (this.authorization_code != undefined && this.authorization_code != "");
                },
                pkceDisabled: function() {
                    return (this.wellKnownData.token_endpoint == undefined || this.wellKnownData.token_endpoint == "");
                },
                jwksDisabled: function() {
                    return (this.wellKnownData.jwks_uri == undefined || this.wellKnownData.jwks_uri == "");
                },
                tokenDisabled: function() {
                    return (this.wellKnownData.token_endpoint == undefined || this.wellKnownData.token_endpoint == "");
                },
                authenticationDisabled: function() {
                    return (this.wellKnownData.token_endpoint == undefined || this.wellKnownData.token_endpoint == "");
                },
                introspectDisabled: function() {
                    return (this.tokens.length == 0);
                }
            },
            methods: {
                getWellKnown() {
                    apiCall(this.wellKnownScreen.wellKnownUri, "GET", {}, this.callbackWellKnown);
                },
                callbackWellKnown(success, response) {
                    this.wellKnownData = response; // Copy over existing object (same properties anyway)

                    // Now load the JWKS if possible
                    if (!this.jwksDisabled) {
                        this.getJWKS();
                    }

                    // Generate a new PKSE verfifier for this client to use to make authentication calls
                    this.createPKSEVerifier();
                },
                getJWKS() {
                    apiCall(this.wellKnownData.jwks_uri, "GET", {}, this.callbackJWKS);
                },
                callbackJWKS(success, response) {
                    this.jwksData = response; // Copy over existing object (same properties anyway)
                },
                createPKSEVerifier() {
                    var verifier = uuidv4();
                    this.pkceScreen.code_verifier = verifier;
                    this.pkceScreen.code_challenge = CryptoJS.SHA256(verifier);
                    this.pkceScreen.code_challenge_method = "SHA256";
                },
                getToken() {
                    var request;
                    if (this.tokenScreen.type == "password") {
                        request = { type: "password", username: this.tokenScreen.username, password: this.tokenScreen.password, client_id: this.client_id };
                    }
                    else if (this.tokenScreen.type == "authorization_code") {
                        request = { type: "authorization_code", code: this.authorization_code, client_id: this.client_id, code_verifier: this.pkceScreen.code_verifier };
                    }
                    else if (this.tokenScreen.type == "client_credentials") {
                        request = { type: "client_credentials", client_id: this.client_id, client_secret: this.client_secret };
                    }
                    else if (this.tokenScreen.type == "refresh_token") {
                        request = { type: "refresh_token", refresh_token: this.refreshToken, client_id: this.client_id };
                    }
                    apiCall(this.wellKnownData.token_endpoint, "GET", request, this.callbackToken);
                },
                callbackToken(success, response) {
                    if (success) {

                        var accessTokenDecoded = parseJwt(response.accessToken);
                        var refreshTokenDecoded = parseJwt(response.refreshToken);
                        this.tokens.push(new tokenStorage(response.accessToken, response.refreshToken));
                    }
                    else {
                        var failureData = JSON.parse(response.data);

                        debugger;
                    }
                },
                getIntrospection() {
                    // Post but with query params (I know right!)
                    var tokenToUse;
                    if (this.introspectionScreen.token_type_hint == "jwt") {
                        tokenToUse = this.tokens[0].accessToken;
                    }
                    else {
                        tokenToUse = this.tokens[0].refreshToken;
                    }

                    apiCall(this.wellKnownData.introspection_endpoint + "?" + serialize({ token: tokenToUse, token_type_hint: this.introspectionScreen.token_type_hint }), "POST", {}, this.callbackIntrospection);
                },
                callbackIntrospection(success, response) {

                    var data = {
                        loaded: true,
                        active: response.active,
                        scope: response.scope,
                        client_id: response.client_id,
                        username: response.username,
                        exp: response.exp,
                        expAsString: unixTicksToIsoString(response['exp'])
                    };

                    this.introspectionData = data;
                },
                launchAuthenticate() {

                    // Build the authorise request
                    var data = {
                        client_id: this.client_id,
                        response_type: this.authenticationScreen.response_type,
                        response_mode: this.authenticationScreen.response_mode,
                        redirect_uri: this.authenticationScreen.redirect_uri,
                        scope: this.authenticationScreen.scope,
                        state: this.authenticationScreen.state,
                        code_challenge: this.authenticationScreen.code_challenge,
                        code_challenge_method: this.authenticationScreen.code_challenge_method
                    };
                    var serialisedData = serialize(data); // Cast it to a querystring

                    // Pop up the authentication screen
                    $("#authenticationModel").modal('show');

                    // Send the payload to the server inside the iframe
                    $("#authenticationIframe").attr('src', "https://localhost:7198/authorize?" + serialisedData);
                }
            },
        }).mount('#app');
        window.app = app; // Expose app to javascript inside functions

        $(function() {
            // https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage
            // Listen for incoming messages from frames (mainly the authorize frame which is loaded and redirected by the server)
            window.addEventListener("message", (event) => {
                /*if (event.origin !== "http://example.org:8080")
                  return;
                */

                try {
                    var decoded = JSON.parse(event.data);
                    app.$data.authorization_code = decoded.code;
                }
                catch
                {
                    alert('Failed to assign response back to client');
                }

                // Hide the authentication screen
                $("#authenticationModel").modal('hide');

            }, false);
        });
    </script>


}