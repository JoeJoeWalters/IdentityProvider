using System.IdentityModel.Tokens.Jwt;
using meta = IdentityProvider.Common.Contracts.MetaData;

namespace IdentityProvider.Server.Authentication.ACR
{
    /// <summary>
    /// 
    /// </summary>
    public class ACRCalculator : IACRCalculator
    {
        public JwtSecurityToken AssignACR(JwtSecurityToken token)
        {
            String acr = meta.ACR.LOALevel1; // Default is level 1 (must have been authorised to get to this point)

            // Move than one form of verification was used (e.g. SMS and Hardware key)
            if (token.Payload.Amr.Count > 1)
                acr = meta.ACR.LOALevel2;
            
            // Token generated by client credential flow or password flow?
#warning This is just to demonstrate, you'd never really let password to have an AMR of level 3 in reality
            if (token.Payload.Amr.Contains(meta.AMR.ClientCredentials))
                acr = meta.ACR.LOALevel4;
            else if (token.Payload.Amr.Contains(meta.AMR.Password))
                acr = meta.ACR.LOALevel3;

            // Does the ACR already exist? Then remove it first
            if (token.Payload.ContainsKey("acr"))
                token.Payload.Remove("acr");

            // Add the ACR
            token.Payload.Add("acr", acr);

            return token;
        }
    }
}
