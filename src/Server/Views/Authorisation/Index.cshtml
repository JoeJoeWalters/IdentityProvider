@using IdentityProvider.Server.Contracts
@using IdentityProvider.Server.Contracts.Tokens
@using IdentityProvider.Server.Views.Authorisation
@model IdentityProvider.Server.Views.Authorisation.IndexModel

@using (Html.BeginForm())
{
    Layout = "_Layout";

    @Html.AntiForgeryToken()

    @switch (Model.Step)
    {
        case @AuthoriseStep.UserEntry:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @class="form-control" })
            </div>
            <button type="submit" class="btn btn-primary">Proceed</button>

            break;

        case @AuthoriseStep.SelectMethod:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @readonly = "readonly", @class="form-control" })
            </div>
            <div class="form-group">
                <label for="Method">Method</label>
                @Html.DropDownListFor(ddl => ddl.TokenRequest.Type, Model.AuthOptions,  new { @class="form-control" })
            </div>
            <button type="submit" class="btn btn-primary">Proceed</button>

            break;

        case @AuthoriseStep.SelectDeliveryMedium:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @readonly = "readonly", @class="form-control" })
            </div>
            <div class="form-group">
                <label for="Method">Method</label>
                @Html.DropDownListFor(ddl => ddl.TokenRequest.Type, Model.AuthOptions, new { @readonly = "readonly", @class="form-control" })
            </div>
            <div class="form-group">
                <label for="Method">Deliver To</label>
                @Html.DropDownListFor(ddl => ddl.OTPDeliveryOption, Model.OTPDeliveryOptions, new { @class="form-control" })
            </div>
            <button type="submit" class="btn btn-primary">Send</button>

            break;

        case @AuthoriseStep.MethodEntry:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @readonly = "readonly", @class="form-control" })
            </div>
            <div class="form-group">
                <label for="Method">Method</label>
                @Html.DropDownListFor(ddl => ddl.TokenRequest.Type, Model.AuthOptions, new { @readonly = "readonly", @class="form-control" })
            </div>

            @switch (Model.TokenRequest.Type)
            {
                case @CustomGrantTypes.Pin:

                    <div class="form-group">
                        <label for="Pin">Pin</label>
                        <div class="input-group mb-3">
                            @for (int i = 0; i < Model.PinDigits.Count; i++)
                            {
                                @Html.PasswordFor(x=>Model.PinDigits[i], !Model.PinDigitsActive[i] ? new {@readonly = "readonly", @class="form-control" } : new { @class="form-control" })
                                @Html.HiddenFor(x=> Model.PinDigitsActive[i])
                            }
                        </div>
                    </div>

                    break;

                case @CustomGrantTypes.OTP:

                    <div class="form-group">
                        <label for="Method">Deliver To</label>
                        @Html.DropDownListFor(ddl => ddl.OTPDeliveryOption, Model.OTPDeliveryOptions, new { @readonly = "readonly", @class="form-control" })
                    </div>
                    <div class="form-group">
                        <label for="Username">OTP</label>
                        @Html.PasswordFor(model => model.TokenRequest.OTP,  new { @class="form-control" })
                        @Html.HiddenFor(model => model.TokenRequest.OTPIdentifier)
                    </div>

                    break;
            }
            <button type="submit" class="btn btn-primary">Authorise</button>

            break;
    }

    @Html.HiddenFor(model => model.Step)
    @Html.HiddenFor(model => model.TokenRequest.Client_Id)
    @Html.HiddenFor(model => model.TokenRequest.RedirectUri)
}