@using Server.Contracts
@using Server.Views.Authorisation
@model Server.Views.Authorisation.IndexModel

@using (Html.BeginForm())
{
    Layout = "_Layout";

    @Html.AntiForgeryToken()

    @switch (Model.Step)
    {
        case @AuthoriseStep.UserEntry:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @class="form-control" })
            </div>
            <!--
            <div class="form-group">
            <label for="Method">Method</label>
            <select class="form-control" readonly="readonly">
            <option value="Pin" selected="selected">Pin</option>
            </select>
            </div>
            <div class="form-group">
            <label for="Pin">Pin</label>
            <input type="text" class="form-control" id="Pin" name="Pin" aria-describedby="PinHelp" placeholder="Enter Pin Number">
            <small id="PinHelp" class="form-text text-muted">Please enter your Pin Number.</small>
            </div>
            -->
            <button type="submit" class="btn btn-primary">Proceed</button>

            break;

        case @AuthoriseStep.SelectMethod:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @readonly = "readonly", @class="form-control" })
            </div>
            <div class="form-group">
                <label for="Method">Method</label>
                <select class="form-control" readonly="readonly">
                    <option value="Passcode" selected="selected">Passcode</option>
                </select>
            </div>

            <button type="submit" class="btn btn-primary">Proceed</button>

            break;

        case @AuthoriseStep.MethodEntry:

            <div class="form-group">
                <label for="Username">Username</label>
                @Html.TextBoxFor(model => model.TokenRequest.Username,  new { @readonly = "readonly", @class="form-control" })
            </div>

            <div class="form-group">
                <label for="Pin">Pin</label>
                <div class="input-group mb-3">
                    @for (int i = 0; i < Model.PinDigits.Count; i++)
                    {
                        @Html.PasswordFor(x=>Model.PinDigits[i], !Model.PinDigitsActive[i] ? new {@readonly = "readonly", @class="form-control" } : new { @class="form-control" })
                        @Html.HiddenFor(x=> Model.PinDigitsActive[i])
                    }
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Authorise</button>

            break;
    }

    @Html.HiddenFor(model => model.Step)
    @Html.HiddenFor(model => model.TokenRequest.Client_Id)
    @Html.HiddenFor(model => model.TokenRequest.RedirectUri)
}